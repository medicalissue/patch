# ===================================================================
# Few-shot Image Patch Detection System Configuration
# ===================================================================
# Architecture:
#   Phase 1: Few-shot Base Learning - Learn normal trajectory characteristics from ImageNet
#   Phase 2: Few-shot Adaptation - Set adaptive threshold using domain-specific clean images
#   Phase 3: Testing - Detect patches in test images
# ===================================================================

# Device configuration
device:
  cuda_id: 2  # CUDA device ID (0, 1, 2, etc.)
  num_workers: 8  # DataLoader workers (adjust based on CPU cores)

# Data configuration
data:
  # Phase 1: ImageNet data for learning base normal characteristics
  imagenet:
    path: /data/ImageNet/train  # Path to ImageNet training data
    num_samples: 1000  # Number of samples to use for learning (-1 for all)
    batch_size: 128  # Batch size for processing

  # Attractor cache configuration
  attractor:
    cache_dir: attractor_cache  # Directory to save/load attractor statistics
    use_cache: true  # Whether to use cached attractor if available
    force_recompute: false  # Force recompute even if cache exists

  # Phase 2: Domain-specific clean images for threshold adaptation
  domain:
    clean_path: images_without_patches  # Path to clean images of target domain
    num_samples: 50  # Number of clean samples (-1 for all available)
    batch_size: 32  # Batch size for processing

  # Phase 3: Test images (with potential patches)
  test:
    patch_path: images_with_patches  # Path to test images
    batch_size: 32  # Batch size for processing

# Model configuration
model:
  spatial_resolution: 7  # Spatial resolution for feature extraction (7, 14, 28, 56)
  feature_dim: 128  # Feature dimension after channel pooling

# Detection configuration
detection:
  # Score fusion method: 'voting', 'weighted_voting', 'all', 'any'
  fusion_method: voting

  # Voting threshold (number of scores that must be anomalous)
  voting_threshold: 3  # At least 3 out of 4 scores (majority voting)

  # Per-score threshold method: 'mean_std', 'median_mad', 'percentile'
  score_threshold_method: median_mad

  # Parameters for 'mean_std' method (per score)
  threshold_multiplier: 2.0  # Threshold = mean + k*std

  # Parameters for 'median_mad' method (per score)
  mad_multiplier: 3.0  # Threshold = median + c*MAD (robust to outliers)

  # Parameters for 'percentile' method (per score)
  percentile: 95.0  # Use this percentile as threshold

  detection_pixel_threshold: 0  # Minimum number of anomalous pixels to classify as detected

# Output configuration
output:
  dir: detection_results  # Directory to save detection results
  save_visualizations: true  # Whether to save visualization images
